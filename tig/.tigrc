set main-view             = line-number:no,interval=5 id:yes date:default author:full,width=0,maxwidth=10 commit-title:yes,graph,refs,overflow=no
set main-view-date        = custom
set main-view-date-format = "%Y-%m-%d %H:%M"
set ignore-case           = smart-case
set mouse                 = yes
set wrap-lines            = no # 長いパスのファイルが開けない
set mouse-scroll          = 5
set diff-highlight        = true
set refresh-mode          = periodic
set refresh-interval      = 3
set tab-size              = 4
# show untracked files in one dir as a dir like `git status` instead of multiple files
set status-show-untracked-dirs = false

# bindings priorities: view->generic->default
bind main       G    move-last-line # overwrite the default
bind generic    G    move-last-line
bind generic    E    !>sh -c "nvim ~/.tigrc"
bind generic    g    none # disable single g
bind generic    gs   view-grep
bind generic    gg   move-first-line
bind generic    gr   refresh # R is the original one
bind generic    p    none # disable single p for pager(default)
bind generic    pl   !git pull
bind generic    pl   !git pull %(remote)
bind generic    P   !<git push
bind generic    PU   !<git push -u %(remote) %(repo:head)
bind generic    <Ctrl-f>   scroll-page-down

bind status     cc    >git commit
bind stage      cc    >git commit
bind generic    ca    ?>git commit --amend

# NOTE: the ignore here only works for new untrcked files
bind status     i    ?>sh -c "echo '%(file)'>>.gitignore" # ignore files
bind status     I    ?>sh -c "echo '%(file)'>>~/.local/bin/.gitignore" # ignore files
bind stage      i    ?>sh -c "echo '%(file)'>>.gitignore" # ignore files
bind stage      i    ?>sh -c "echo '%(file)'>>~/.local/bin/.gitignore" # ignore files

bind status     s    status-update # stage/unstage/track/untrack a file
bind status     u    status-revert # revert changes in file
bind status     C    ?>git checkout -- %(file) # delete changes on files in unstaged status

bind stage      s    status-update # stage/unstage/track/untrack a file
bind stage      u    status-revert # revert changes in file
bind stage      C    ?>git checkout -- %(file) # delete changes on files in unstaged status

# NOTE: -p option need to start tig from typing the command instead of using shortcut to open tig
bind generic    Y    >git stash push -m "%(prompt Msg: )" -p
bind stash      p    ?>git stash pop %(stash)
bind diff       p    ?>git stash pop %(stash)
bind stash      d    ?>git stash drop %(stash)
bind status     P    >git stash push -m "%(prompt Msg: )" -p
bind stage      P    >git stash push -m "%(prompt Msg: )" -p

bind generic    c    none # disable single c
bind generic    cb   ?git checkout -b "%(prompt Enter new branch name: )"
bind refs       cc   ?git checkout %(branch)

bind diff       [    :?^@@  # jump to the prev diff hunk
bind diff       ]    :/^@@  # jump to the next diff hunk
bind diff       <LessThan> :?^diff --(git|cc) # jump to the prev diff header
bind diff       >    :/^diff --(git|cc) # jump to the next diff header
bind diff       {    :toggle diff-context -1  # Decrease the diff context
bind diff       }    :toggle diff-context +1  # Increase the diff context
bind diff       gS   !>sh -c "git show %(commit) > %(commit).diff" # save diff buffer into file

bind stage      [    :?^@@  # jump to the prev diff hunk
bind stage      ]    :/^@@  # jump to the next diff hunk
bind stage      <LessThan> :?^diff --(git|cc) # jump to the prev diff header
bind stage      >    :/^diff --(git|cc) # jump to the next diff header
bind stage      {    :toggle diff-context -1  # Decrease the diff context
bind stage      }    :toggle diff-context +1  # Increase the diff context

bind log        [    :?"^commit " # jump to the prev commit
bind log        ]    :/"^commit " # jump to the next commit
bind log        gm   !git show -m %(commit) # use this when diff can not be displayed, such as for merge
bind diff       gm   !git show -m %(commit) # use this when diff can not be displayed, such as for merge
bind stage      gm   !git show -m %(commit) # use this when diff can not be displayed, such as for merge

#Fetch
bind generic F      ?git fetch %(remote)
bind main    F      ?git fetch %(remote)

#Move cursol
bind generic J move-page-down
bind generic K move-page-up

#Reflog
bind log     l      !<sh -c "git reflog --pretty=raw | tig --pretty=raw"
bind generic S      ?git reset --soft HEAD~1

#Reset --hard
bind main    H      ?git reset --hard %(commit)
bind diff    H      ?git reset --hard %(commit)
bind log     H      ?git reset --hard %(commit)
bind refs    H      ?git reset --hard %(branch)
bind status  H      ?git reset --hard HEAD

#Checkout
bind main    =      ?git checkout %(branch)
bind refs    =      ?git checkout %(branch)
bind main    <Esc>= ?git checkout %(commit)

#Merge
bind main    M      ?git merge %(branch)
bind diff    M      ?git merge %(branch)
bind refs    M      ?git merge %(branch)

#Rebase -i
bind main    I      ?git rebase -i %(branch)
bind diff    I      ?git rebase -i %(branch)
bind refs    I      ?git rebase -i %(branch)
bind main    <Esc>i ?git rebase -i %(commit)
bind diff    <Esc>i ?git rebase -i %(commit)

#diff
bind main    <Esc>c     ?git diff %(commit)..HEAD
bind main    <Esc>b     ?git diff %(branch)..HEAD

